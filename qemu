#!/bin/sh

# Determine build target (default to debug)
[ -z "$1" ] && target="debug" || target="release"

# function to build a component and handle errors
build_component() {
    dir="$1"
    pushd "$dir" || exit 1
    cargo build $( [ "$target" = "release" ] && echo "--release" )
    build_status=$?
    popd || exit 1
    [ $build_status -ne 0 ] && echo "$dir build failed" && exit 1
}

build_trampolines() {
    # If this is the first run, the target directory won't be created yet
    mkdir -p "bootloader/target"
    mkdir -p "kernel/target"
    nasm -f bin -o "bootloader/target/trampoline.bin" "shared/shared_data/src/trampoline.asm" || exit 1
    nasm -f bin -o "kernel/target/apic_entry.bin" "kernel/src/apic/apic_entry.asm" || exit
}

# Build the trampolines
build_trampolines

# Build the kernel and copy it to where the bootloader expects it
build_component "kernel"
cp "kernel/target/x86_64-unknown-linux-gnu/$target/kernel" "kernel/target/kernel.bin" || exit 1

# Build the bootloader
build_component "bootloader"

# Start qemu with the bootloader image
tftp="bootloader/target/x86_64-unknown-uefi/$target"
ovmf="/usr/share/edk2-ovmf/OVMF_CODE.fd"
smp="6,cores=3,threads=1,sockets=2"
mem_mb="4096"

sudo qemu-system-x86_64 \
    -enable-kvm \
    -m "$mem_mb" \
    -smp "$smp" \
    -nographic \
    -bios "$ovmf" \
    -object memory-backend-ram,size=2048M,id=mem0 \
    -object memory-backend-ram,size=2048M,id=mem1 \
    -numa node,cpus=0-2,memdev=mem0 \
    -numa node,cpus=3-5,memdev=mem1 \
    -device driver=e1000e,netdev=net0 \
    -device driver=e1000,netdev=net1 \
    -netdev user,id=net0,tftp="$tftp",bootfile=bootloader.efi \
    -netdev user,id=net1
